name: Install wasm-pack & wasm-opt
description: 'Installs wasm-pack and binaryen (wasm-opt) tools for WebAssembly development with caching support.'
author: RoMarketplace Team (romarketplace-com)
branding:
  icon: 'download-cloud'
  color: 'blue'
inputs:
  wasm-pack-version:
    description: 'Version of wasm-pack to install'
    required: false
    default: 'latest'
  binaryen-version:
    description: 'Version of binaryen to install'
    required: false
    default: 'latest'

runs:
  using: composite
  steps:
    - name: Detect platform and architecture
      shell: bash
      id: platform
      run: |
        case "${{ runner.os }}" in
          "Linux")
            OS="linux"
            case "${{ runner.arch }}" in
              "X64") ARCH="x86_64" ;;
              "ARM64") ARCH="aarch64" ;;
              *) echo "Unsupported architecture: ${{ runner.arch }}" && exit 1 ;;
            esac
            ;;
          "macOS")
            OS="macos"
            case "${{ runner.arch }}" in
              "X64") ARCH="x86_64" ;;
              "ARM64") ARCH="arm64" ;;
              *) echo "Unsupported architecture: ${{ runner.arch }}" && exit 1 ;;
            esac
            ;;
          "Windows")
            OS="windows"
            case "${{ runner.arch }}" in
              "X64") ARCH="x86_64" ;;
              *) echo "Unsupported architecture: ${{ runner.arch }}" && exit 1 ;;
            esac
            ;;
          *)
            echo "Unsupported OS: ${{ runner.os }}"
            exit 1
            ;;
        esac
        echo "os=$OS" >> $GITHUB_OUTPUT
        echo "arch=$ARCH" >> $GITHUB_OUTPUT
        echo "Detected platform: $OS-$ARCH"

    - name: Get wasm-pack release info
      shell: bash
      id: wasm-pack-release
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        if [ "${{ inputs.wasm-pack-version }}" = "latest" ]; then
          API_URL="https://api.github.com/repos/rustwasm/wasm-pack/releases/latest"
        else
          API_URL="https://api.github.com/repos/rustwasm/wasm-pack/releases/tags/v${{ inputs.wasm-pack-version }}"
        fi
        
        RELEASE_DATA=$(curl -sf -H "Authorization: Bearer $GH_TOKEN" "$API_URL")
        if [ $? -ne 0 ]; then
          echo "Error: Failed to fetch release data for wasm-pack from $API_URL"
          exit 1
        fi

        VERSION=$(echo "$RELEASE_DATA" | jq -r '.tag_name')
        if [ "$VERSION" = "null" ] || [ -z "$VERSION" ]; then
          echo "Error: Could not extract version from API response for wasm-pack."
          echo "Response: $RELEASE_DATA"
          exit 1
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "wasm-pack version: $VERSION"
        
        case "${{ steps.platform.outputs.os }}" in
          "windows") 
            EXT=".exe"
            PLATFORM_NAME="pc-windows-msvc"
            ;;
          "linux") 
            EXT=""
            PLATFORM_NAME="unknown-linux-musl"
            ;;
          "macos") 
            EXT=""
            PLATFORM_NAME="apple-darwin"
            ;;
        esac
        
        FILENAME="wasm-pack-${VERSION}-${{ steps.platform.outputs.arch }}-${PLATFORM_NAME}.tar.gz"
        DOWNLOAD_URL=$(echo "$RELEASE_DATA" | jq -r --arg filename "$FILENAME" '.assets[] | select(.name == $filename) | .browser_download_url')
        
        if [ "$DOWNLOAD_URL" = "null" ] || [ -z "$DOWNLOAD_URL" ]; then
          echo "Could not find asset for $FILENAME"
          echo "Available assets:"
          echo "$RELEASE_DATA" | jq -r '.assets[].name'
          exit 1
        fi
        
        echo "download_url=$DOWNLOAD_URL" >> $GITHUB_OUTPUT
        echo "filename=$FILENAME" >> $GITHUB_OUTPUT
        echo "ext=$EXT" >> $GITHUB_OUTPUT

    - name: Get binaryen release info
      shell: bash
      id: binaryen-release
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        if [ "${{ inputs.binaryen-version }}" = "latest" ]; then
          API_URL="https://api.github.com/repos/WebAssembly/binaryen/releases/latest"
        else
          API_URL="https://api.github.com/repos/WebAssembly/binaryen/releases/tags/version_${{ inputs.binaryen-version }}"
        fi
        
        RELEASE_DATA=$(curl -sf -H "Authorization: Bearer $GH_TOKEN" "$API_URL")
        if [ $? -ne 0 ]; then
          echo "Error: Failed to fetch release data for binaryen from $API_URL"
          exit 1
        fi
        
        VERSION=$(echo "$RELEASE_DATA" | jq -r '.tag_name')
        if [ "$VERSION" = "null" ] || [ -z "$VERSION" ]; then
          echo "Error: Could not extract version from API response for binaryen."
          echo "Response: $RELEASE_DATA"
          exit 1
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "binaryen version: $VERSION"
        
        case "${{ steps.platform.outputs.os }}" in
          "windows") 
            PLATFORM_NAME="x86_64-windows"
            EXT=".exe"
            ;;
          "linux") 
            case "${{ steps.platform.outputs.arch }}" in
              "x86_64") PLATFORM_NAME="x86_64-linux" ;;
              "aarch64") PLATFORM_NAME="arm64-linux" ;;
            esac
            EXT=""
            ;;
          "macos") 
            case "${{ steps.platform.outputs.arch }}" in
              "x86_64") PLATFORM_NAME="x86_64-macos" ;;
              "arm64") PLATFORM_NAME="arm64-macos" ;;
            esac
            EXT=""
            ;;
        esac
        
        FILENAME="binaryen-${VERSION}-${PLATFORM_NAME}.tar.gz"
        DOWNLOAD_URL=$(echo "$RELEASE_DATA" | jq -r --arg filename "$FILENAME" '.assets[] | select(.name == $filename) | .browser_download_url')
        
        if [ "$DOWNLOAD_URL" = "null" ] || [ -z "$DOWNLOAD_URL" ]; then
          echo "Could not find asset for $FILENAME"
          echo "Available assets:"
          echo "$RELEASE_DATA" | jq -r '.assets[].name'
          exit 1
        fi
        
        echo "download_url=$DOWNLOAD_URL" >> $GITHUB_OUTPUT
        echo "filename=$FILENAME" >> $GITHUB_OUTPUT
        echo "ext=$EXT" >> $GITHUB_OUTPUT

    - name: Create installation directory
      shell: bash
      run: |
        mkdir -p "$HOME/.local/bin"
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Generate cache key
      shell: bash
      id: cache-key
      run: |
        CACHE_KEY="wasm-tools-${{ steps.platform.outputs.os }}-${{ steps.platform.outputs.arch }}-${{ steps.wasm-pack-release.outputs.version }}-${{ steps.binaryen-release.outputs.version }}"
        echo "key=$CACHE_KEY" >> $GITHUB_OUTPUT
        echo "Cache key: $CACHE_KEY"

    - name: Cache installed tools
      uses: actions/cache@v4
      id: cache-tools
      with:
        path: ~/.local/bin
        key: ${{ steps.cache-key.outputs.key }}

    - name: Download and install wasm-pack
      shell: bash
      if: steps.cache-tools.outputs.cache-hit != 'true'
      run: |
        echo "Downloading wasm-pack from: ${{ steps.wasm-pack-release.outputs.download_url }}"
        curl -L "${{ steps.wasm-pack-release.outputs.download_url }}" -o "${{ steps.wasm-pack-release.outputs.filename }}"
        
        echo "Extracting wasm-pack..."
        EXTRACTED_DIR=$(tar -tzf "${{ steps.wasm-pack-release.outputs.filename }}" | head -1 | cut -f1 -d"/")
        tar -xzf "${{ steps.wasm-pack-release.outputs.filename }}"
        
        echo "Copying wasm-pack binary to local bin..."
        cp "${EXTRACTED_DIR}/wasm-pack${{ steps.wasm-pack-release.outputs.ext }}" "$HOME/.local/bin/wasm-pack${{ steps.wasm-pack-release.outputs.ext }}"
        chmod +x "$HOME/.local/bin/wasm-pack${{ steps.wasm-pack-release.outputs.ext }}"
        
        # On Windows, create a copy without the .exe for consistent calling
        if [ ! -z "${{ steps.wasm-pack-release.outputs.ext }}" ]; then
          cp "$HOME/.local/bin/wasm-pack${{ steps.wasm-pack-release.outputs.ext }}" "$HOME/.local/bin/wasm-pack"
        fi
        
        echo "wasm-pack installed successfully"
        "wasm-pack" --version

    - name: Download and install binaryen (wasm-opt)
      shell: bash
      if: steps.cache-tools.outputs.cache-hit != 'true'
      run: |
        echo "Downloading binaryen from: ${{ steps.binaryen-release.outputs.download_url }}"
        curl -L "${{ steps.binaryen-release.outputs.download_url }}" -o "${{ steps.binaryen-release.outputs.filename }}"
        
        echo "Extracting binaryen..."
        EXTRACTED_DIR=$(tar -tzf "${{ steps.binaryen-release.outputs.filename }}" | head -1 | cut -f1 -d"/")
        tar -xzf "${{ steps.binaryen-release.outputs.filename }}"
        
        echo "Copying binaryen tools from ${EXTRACTED_DIR}/bin to $HOME/.local/bin"
        
        for tool in wasm-opt wasm-as wasm-dis wasm2js wasm-reduce wasm-shell wasm-emscripten-finalize wasm-ctor-eval wasm-merge wasm-metadce; do
          if [ -f "${EXTRACTED_DIR}/bin/${tool}${{ steps.binaryen-release.outputs.ext }}" ]; then
            cp "${EXTRACTED_DIR}/bin/${tool}${{ steps.binaryen-release.outputs.ext }}" "$HOME/.local/bin/${tool}${{ steps.binaryen-release.outputs.ext }}"
            chmod +x "$HOME/.local/bin/${tool}${{ steps.binaryen-release.outputs.ext }}"
            
            # On Windows, create a copy without the .exe for consistent calling
            if [ ! -z "${{ steps.binaryen-release.outputs.ext }}" ]; then
              cp "$HOME/.local/bin/${tool}${{ steps.binaryen-release.outputs.ext }}" "$HOME/.local/bin/${tool}"
            fi
            echo "${tool} installed successfully"
          fi
        done
        
        echo "binaryen tools installed successfully"
        "wasm-opt" --version

    - name: Verify installations
      shell: bash
      run: |
        echo "=== Verifying installations ==="
        if command -v wasm-pack >/dev/null 2>&1; then
          echo "✅ wasm-pack is available in PATH"
          wasm-pack --version
        else
          echo "❌ wasm-pack is not available in PATH"
          exit 1
        fi
        
        if command -v wasm-opt >/dev/null 2>&1; then
          echo "✅ wasm-opt is available in PATH"
          wasm-opt --version
        else
          echo "❌ wasm-opt is not available in PATH"
          exit 1
        fi
        
        echo ""
        if [ "${{ steps.cache-tools.outputs.cache-hit }}" = "true" ]; then
          echo "🚀 Tools were restored from cache!"
        else
          echo "📦 Tools were freshly installed and cached."
        fi
        echo "🎉 wasm-pack and binaryen tools are ready to use!"

    - name: Cleanup
      shell: bash
      if: steps.cache-tools.outputs.cache-hit != 'true'
      run: |
        echo "Cleaning up downloaded files and extracted directories..."
        rm -f wasm-pack-*.tar.gz binaryen-*.tar.gz
        rm -rf wasm-pack-*/ binaryen-*/
        echo "Cleanup completed"
